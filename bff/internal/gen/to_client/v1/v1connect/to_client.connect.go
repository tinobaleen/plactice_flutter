// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: to_client.proto

package v1connect

import (
	v1 "bff/internal/gen/to_client/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatMesssageServiceName is the fully-qualified name of the ChatMesssageService service.
	ChatMesssageServiceName = "conenctrpc.to_client.v1.ChatMesssageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatMesssageServiceMessageRequestProcedure is the fully-qualified name of the
	// ChatMesssageService's MessageRequest RPC.
	ChatMesssageServiceMessageRequestProcedure = "/conenctrpc.to_client.v1.ChatMesssageService/MessageRequest"
)

// ChatMesssageServiceClient is a client for the conenctrpc.to_client.v1.ChatMesssageService
// service.
type ChatMesssageServiceClient interface {
	MessageRequest(context.Context, *connect.Request[v1.ChatMessageRequest]) (*connect.ServerStreamForClient[v1.ChatMessageResponse], error)
}

// NewChatMesssageServiceClient constructs a client for the
// conenctrpc.to_client.v1.ChatMesssageService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatMesssageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatMesssageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chatMesssageServiceMethods := v1.File_to_client_proto.Services().ByName("ChatMesssageService").Methods()
	return &chatMesssageServiceClient{
		messageRequest: connect.NewClient[v1.ChatMessageRequest, v1.ChatMessageResponse](
			httpClient,
			baseURL+ChatMesssageServiceMessageRequestProcedure,
			connect.WithSchema(chatMesssageServiceMethods.ByName("MessageRequest")),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatMesssageServiceClient implements ChatMesssageServiceClient.
type chatMesssageServiceClient struct {
	messageRequest *connect.Client[v1.ChatMessageRequest, v1.ChatMessageResponse]
}

// MessageRequest calls conenctrpc.to_client.v1.ChatMesssageService.MessageRequest.
func (c *chatMesssageServiceClient) MessageRequest(ctx context.Context, req *connect.Request[v1.ChatMessageRequest]) (*connect.ServerStreamForClient[v1.ChatMessageResponse], error) {
	return c.messageRequest.CallServerStream(ctx, req)
}

// ChatMesssageServiceHandler is an implementation of the
// conenctrpc.to_client.v1.ChatMesssageService service.
type ChatMesssageServiceHandler interface {
	MessageRequest(context.Context, *connect.Request[v1.ChatMessageRequest], *connect.ServerStream[v1.ChatMessageResponse]) error
}

// NewChatMesssageServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatMesssageServiceHandler(svc ChatMesssageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatMesssageServiceMethods := v1.File_to_client_proto.Services().ByName("ChatMesssageService").Methods()
	chatMesssageServiceMessageRequestHandler := connect.NewServerStreamHandler(
		ChatMesssageServiceMessageRequestProcedure,
		svc.MessageRequest,
		connect.WithSchema(chatMesssageServiceMethods.ByName("MessageRequest")),
		connect.WithHandlerOptions(opts...),
	)
	return "/conenctrpc.to_client.v1.ChatMesssageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatMesssageServiceMessageRequestProcedure:
			chatMesssageServiceMessageRequestHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatMesssageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatMesssageServiceHandler struct{}

func (UnimplementedChatMesssageServiceHandler) MessageRequest(context.Context, *connect.Request[v1.ChatMessageRequest], *connect.ServerStream[v1.ChatMessageResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("conenctrpc.to_client.v1.ChatMesssageService.MessageRequest is not implemented"))
}
