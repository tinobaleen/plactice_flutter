// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: to_llm.proto

package v1connect

import (
	v1 "bff/internal/gen/to_llm/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LlmServiceName is the fully-qualified name of the LlmService service.
	LlmServiceName = "grpc.to_llm.v1.LlmService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LlmServiceLlmMessageRequestProcedure is the fully-qualified name of the LlmService's
	// LlmMessageRequest RPC.
	LlmServiceLlmMessageRequestProcedure = "/grpc.to_llm.v1.LlmService/LlmMessageRequest"
	// LlmServiceHealthCheckProcedure is the fully-qualified name of the LlmService's HealthCheck RPC.
	LlmServiceHealthCheckProcedure = "/grpc.to_llm.v1.LlmService/HealthCheck"
)

// LlmServiceClient is a client for the grpc.to_llm.v1.LlmService service.
type LlmServiceClient interface {
	LlmMessageRequest(context.Context, *connect.Request[v1.LlmRequest]) (*connect.ServerStreamForClient[v1.LlmResponse], error)
	HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Health], error)
}

// NewLlmServiceClient constructs a client for the grpc.to_llm.v1.LlmService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLlmServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LlmServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	llmServiceMethods := v1.File_to_llm_proto.Services().ByName("LlmService").Methods()
	return &llmServiceClient{
		llmMessageRequest: connect.NewClient[v1.LlmRequest, v1.LlmResponse](
			httpClient,
			baseURL+LlmServiceLlmMessageRequestProcedure,
			connect.WithSchema(llmServiceMethods.ByName("LlmMessageRequest")),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[emptypb.Empty, v1.Health](
			httpClient,
			baseURL+LlmServiceHealthCheckProcedure,
			connect.WithSchema(llmServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
	}
}

// llmServiceClient implements LlmServiceClient.
type llmServiceClient struct {
	llmMessageRequest *connect.Client[v1.LlmRequest, v1.LlmResponse]
	healthCheck       *connect.Client[emptypb.Empty, v1.Health]
}

// LlmMessageRequest calls grpc.to_llm.v1.LlmService.LlmMessageRequest.
func (c *llmServiceClient) LlmMessageRequest(ctx context.Context, req *connect.Request[v1.LlmRequest]) (*connect.ServerStreamForClient[v1.LlmResponse], error) {
	return c.llmMessageRequest.CallServerStream(ctx, req)
}

// HealthCheck calls grpc.to_llm.v1.LlmService.HealthCheck.
func (c *llmServiceClient) HealthCheck(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.Health], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// LlmServiceHandler is an implementation of the grpc.to_llm.v1.LlmService service.
type LlmServiceHandler interface {
	LlmMessageRequest(context.Context, *connect.Request[v1.LlmRequest], *connect.ServerStream[v1.LlmResponse]) error
	HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Health], error)
}

// NewLlmServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLlmServiceHandler(svc LlmServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	llmServiceMethods := v1.File_to_llm_proto.Services().ByName("LlmService").Methods()
	llmServiceLlmMessageRequestHandler := connect.NewServerStreamHandler(
		LlmServiceLlmMessageRequestProcedure,
		svc.LlmMessageRequest,
		connect.WithSchema(llmServiceMethods.ByName("LlmMessageRequest")),
		connect.WithHandlerOptions(opts...),
	)
	llmServiceHealthCheckHandler := connect.NewUnaryHandler(
		LlmServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(llmServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	return "/grpc.to_llm.v1.LlmService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LlmServiceLlmMessageRequestProcedure:
			llmServiceLlmMessageRequestHandler.ServeHTTP(w, r)
		case LlmServiceHealthCheckProcedure:
			llmServiceHealthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLlmServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLlmServiceHandler struct{}

func (UnimplementedLlmServiceHandler) LlmMessageRequest(context.Context, *connect.Request[v1.LlmRequest], *connect.ServerStream[v1.LlmResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("grpc.to_llm.v1.LlmService.LlmMessageRequest is not implemented"))
}

func (UnimplementedLlmServiceHandler) HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Health], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("grpc.to_llm.v1.LlmService.HealthCheck is not implemented"))
}
